#--------------------------------------------------------------------------------------------
# Wish list 

## THE BIG MIGRATION: 
#	- Move to Python 3.x 
#	- deal with any UNICODE strings anywhere.
# 	- use right mechanism for HTTP downloads. 
#	- geting page, streams and captions all have different types of download functions. Generalize!

## Reliable Download:
#	- create your own powerful downloader which can go chunk-by-chunk with better control. 
#	- get watch page to retrive the play duration - dont' need to downloard the full thing for it. 
#	- deal with network failures. -- retry, wait-n-resume
#	- deal with resume on socket. (resume partial downloads) 
#	- network reconnect should re-establish things [ start partial download from where it was left]
#	- parallel thread downloading 
#	- If youtube throws 404/403 - in actual downloads. it should not proceed like a normal flow. Exception should be handled. [ Done! ]
#	- Deal with signatured streams that otherwise throws 403 (e.g. '-RMD88DNaGk') 
#	- there exists custom urls for channels. see https://www.youtube.com/account_advanced
#	- my own channel is different from std (makemegenious) https://www.youtube.com/channel/UCzvGqEme9-yngxiYXY_Zk7A

## Trace and No repeat download:
#	- maintain a trace and don't redownload what you have already got. { verify in the directory ... } 
# 	- skip what is already downloaded  { verify in the directory ... } 
#	- you can also check if the file is physically present. 
#	- downalod_stream function should provide data of actual status and details of download (put it to trace)
#	- MD5 or play duration verification of Media files (large ones) 
#	- needs to see that duration available locally matches with what is claimed by YT { to verify if the file downloaded is complete! } 
#	- where and how to keep the trace? what is the file format? 
#	- maintain csv generator that can keep the trace. 
#	- ask if the file to be downloaded already exists
`
## Generic Config and post processing:
#	- make config.py to access all configs (editable by users) which works as defaults 
#	- generic methods/ or customzable file titles. 
#	- generic policies in what to fetch : AudioOnly/VideoOnly/AV, Max res, 
#	- post processing of video. e.g. convert to mp3
#	- generalize the output file format ... make it what user wants. Can be done at FFMPEG level. 

## .yl file format and power fetch:
#	- now the .yl in turn can have references to full channel, playlist etc. expand all of them before download 
#	- probe for file size during extract and capture it in yl format? 
#	- tabs being compulsory in .yl files is a problem, specially when the files are handwritten. 
#	- fetch can now be given multiple uid_references which it can download all serially
#	- download channels --by-playlist - so will keep each playlist in different subfolder 

## Beyond youtube:
#	- download from Dailymotion
#	- download from vimeo
#	- download from these sites including playlists/ channels. 

## General
#	- mkdir if folder for -f doesn't exist. 
#	- don't say 'Enjoy the video' when there is no download. 
#	- Resume incomplete downloads from where they were left 
#	- capture critical stuff and do clean exit when user presses Ctr+C 
#	- list control - follow list, pause, stop and resume post what is finished. 
#	- make it interactive shell? i.e. commands can be given while work is going on. Press Ctr+C to interrupt
#	- instead of pretty print. Video meta can be explained in more human readable format. 
#	- in case of multiple parallel downloads, the current \r funda won't work. So need central reporting engine.
# 	- file issues for well defined items. 
#	- prepare readme - specially for explaining usage and download_ref. 
#	- specify dependencies -e.g. certifi 
#----------------------------------------------------------------------------------------------------
# Code TODO 
#	- make item logger global (how will you handle in multithread situation?) 
#	- centrlized all standard strings (including youtube.com/xxx where we are assuming known url 
#	- get rid of print_smap_XXX functions and no extra return value from parse_stream_map 
#	- keep all common strings in a central place 
#	- it's time, the code must have classes for important stuff. 
#	- load_list of different type should come with simple and single abstraction. 
#-----------------------------------------------------------------------------------------------------


